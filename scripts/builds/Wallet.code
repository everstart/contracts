.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
ENDS
; modifier checkPubKey
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
GETGLOB 2
EQUAL
THROWIFNOT 1103
; constructor Account
ACCEPT
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
CALLREF {
	CALL $setOwnership_internal_macro$
}
; end constructor Account
; end modifier checkPubKey
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro sendTransaction
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode value
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode bounce
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
; Decode flags
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
; Decode payload
;; decode TvmCell
LDREF
ENDS
;; param: dest
;; param: value
;; param: bounce
;; param: flags
;; param: payload
CALLREF {
	CALL $sendTransaction_internal_macro$
}
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	sendTransaction_internal
.type	sendTransaction_internal, @function
CALL $sendTransaction_internal_macro$

.macro sendTransaction_internal_macro
;; param: dest
;; param: value
;; param: bounce
;; param: flags
;; param: payload
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 10
EQUAL
THROWIFNOT 1101
; function sendTransaction
ACCEPT
;; transfer()
;; push identifier value
PUSH S3
;; push identifier dest
PUSH S5
;; push identifier bounce
PUSH S4
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 1
;; push identifier payload
PUSH S1
STREFR
ENDC
;; push identifier flags
PUSH S2
SENDRAWMSG
; end function sendTransaction
; end modifier onlyOwner
BLKDROP 5

.globl	setOwnership_internal
.type	setOwnership_internal, @function
CALL $setOwnership_internal_macro$

.macro setOwnership_internal_macro
;; param: newOwner
; function setOwnership
;; push identifier owner
GETGLOB 10
;; decl: oldOwner
; expValue
; end expValue
;; push identifier newOwner
PUSH S1
; colValue
SETGLOB 10
; end colValue
;; emit OwnershipTransferred
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x536cd3f2
;; previousOwner
;; push identifier oldOwner
PUSH S1
STUR 256
;; newOwner
;; push identifier newOwner
PUSH S2
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
DROP
; end function setOwnership
DROP

.macro transferOwnership
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode newOwner
LDU 256
ENDS
;; param: newOwner
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 10
EQUAL
THROWIFNOT 1101
; function transferOwnership
;; push identifier newOwner
DUP
NEQINT 0
THROWIFNOT 1102
ACCEPT
;; push identifier newOwner
DUP
CALLREF {
	CALL $setOwnership_internal_macro$
}
; end function transferOwnership
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
XCHG s2
STU 256
STU 256
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDU 256
PLDU 256
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDU 256
	PLDU 256
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init owner
	PUSHINT 0
	SETGLOB 10
	; init _randomNonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 11
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
PLDU 4
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro owner
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 10
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x9178e9bd
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro _randomNonce
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 11
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xbb53331f
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 995308319
LEQ
PUSHCONT {
	DUP
	PUSHINT 293136829
	EQUAL
	IFJMPREF {
		CALL $owner$
	}
	DUP
	PUSHINT 995308319
	EQUAL
	IFJMPREF {
		CALL $_randomNonce$
	}
}
IFJMP
DUP
PUSHINT 1482330212
LEQ
PUSHCONT {
	DUP
	PUSHINT 1290691692
	EQUAL
	IFJMPREF {
		CALL $sendTransaction$
	}
	DUP
	PUSHINT 1482330212
	EQUAL
	IFJMPREF {
		CALL $transferOwnership$
	}
}
IFJMP
DUP
PUSHINT 1756716863
EQUAL
IFJMPREF {
	CALL $constructor$
}
